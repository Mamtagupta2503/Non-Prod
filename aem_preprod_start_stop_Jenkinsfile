def datacenter = params.DC
def action = params.Action
def application = params.Application
def serverFromParam = params.Server
def publishresults

pipeline {
    agent any

    stages {
        stage('git pull'){
			/*steps {
			git branch: 'main', changelog: false, credentialsId: 'jenkins_bitbucket', poll: false, url: 'https://github.com/Mamtagupta2503/Non-Prod.git'
			}*/
			steps{
			//checkout([$class: 'GitSCM', branches: [[name: '*/main']],userRemoteConfigs: [[url: 'https://github.com/Mamtagupta2503/mamta.git']]])
			//checkout changelog: false, poll: false, scm: scmGit(branches: [[name: '*/main']], extensions: [[$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: 'test/start-stop.sh']]]], userRemoteConfigs: [[url: 'https://github.com/Mamtagupta2503/mamta.git']])
            checkout([  
                $class: 'GitSCM', 
                branches: [[name: 'main']], 
                doGenerateSubmoduleConfigurations: false, 
                extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'StartStopDirectory']], 
                submoduleCfg: [], 
                userRemoteConfigs: [[url: 'https://github.com/Mamtagupta2503/mamta.git']]
        ])
            }
		}
        stage('Parallel execution') {
            parallel {
                stage('aem-preprod-auth-pub-nodes') {
                    when {
                        expression {
                        'aem-preprod-auth-pub-nodes' in application||'All' in application
                        }
                    }
                    steps {
                        script{
							try{
                                println "Performing "+ action +" on application aem-preprod-auth-pub-nodes"
                                def serverdetails = readJSON file: 'aem_preprod_auth_pub.json'
                                def nceservers = serverdetails.PREPROD_NCE_SERVERS
                                def ncwservers = serverdetails.PREPROD_NCW_SERVERS
								def servers
								def serviceType = 'puppet'
								if(application =='All') {
									if(datacenter =='NCE'){
										servers = nceservers
									}
									else if(datacenter =='NCW'){
										servers = ncwservers
									}
                                }
								else 
								{	
									servers = serverFromParam
									println "servers selected from job parameter: " + servers
                                }
								
								println "servers-" + servers
								def result = performaction(servers,action,serviceType)
								publishresults = publishresults + "aem-preprod-auth-pub-nodes: " + result+ "\n"

								

							}catch(Exception e) {
                                result ='Failure'
								publishresults = publishresults + "aem-preprod-auth-pub-nodes: " + result+ "\n"
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') 
								{
                                    sh "exit 1"
                                }
                            }
						}
					}
				}
				stage('aem-preprod-dispatcher-nodes') {
                    when {
                        expression {
                        'aem-preprod-dispatcher-nodes' in application||'All' in application
                        }
                    }
                    steps {
                        script{
							try{
                                println "Performing "+ action +" on application aem-preprod-dispatcher-nodes"
                                def serverdetails = readJSON file: 'aem_preprod_disp.json'
								def nceservers = serverdetails.PREPROD_NCE_SERVERS
                                def ncwservers = serverdetails.PREPROD_NCW_SERVERS
								def servers
								def serviceType = 'httpd'
								if(application =='All') {
									if(datacenter =='NCE'){
										servers = nceservers
									}
									else if(datacenter =='NCW'){
										servers = ncwservers
									}
                                }
								else 
								{	
									servers = serverFromParam
                                }
								println "servers-" + servers	
								def result = performaction(servers,action,serviceType)
								publishresults = publishresults + "aem-preprod-dispatcher-nodes: " + result+ "\n"
								
							}catch(Exception e) {
                                result ='Failure'
								publishresults = publishresults + "aem-preprod-dispatcher-nodes: " + result+ "\n"
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') 
								{
                                    sh "exit 1"
                                }
                            }
						}
					}
				}
				stage('aem-pre-prod-haproxy') {
                    when {
                        expression {
                        'aem-pre-prod-haproxy' in application||'All' in application
                        }
                    }
                    steps {
                        script{
							try{
                                println "Performing "+ action +" on application aem-pre-prod-haproxy"
                                def serverdetails = readJSON file: 'aem_preprod_haproxy.json'
                                def nceserver = serverdetails.PREPROD_NCE_SERVERS
                                def ncwserver = serverdetails.PREPROD_NCW_SERVERS
							}catch(Exception e) {
                                result ='Failure'
								publishresults = publishresults + "aem-pre-prod-haproxy: " + result+ "\n"
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') 
								{
                                    sh "exit 1"
                                }
                            }
						}
					}
				}
			}
		}
	}
}
def performaction(Object servers, String action, String servicetype){
	
	def result ='Success'
	
	for(s in servers) {
		def SSH_OPTION="ssh -o LogLevel=error test_account@${s} -o StrictHostKeyChecking=no"
		def ssh_status_command ="ssh -o StrictHostKeyChecking=no -qq -i ~/.ssh/id_jenkins_worker_rsa jenkins_worker@${s}"
			
		try{
			if(action == 'start'){
				println "$SSH_OPTION sudo service ${servicetype} ${action}"
				sleep 2
				println "$ssh_status_command sudo service ${servicetype} status | grep \"active (running)\""
				sleep 5
				if(servicetype == 'puppet'){
					startstopaem(s,action,servicetype)
				}
			}
			else if(action == 'stop'){
				println "$SSH_OPTION sudo service ${servicetype} ${action}"
				sleep 2
				println "$ssh_status_command sudo service ${servicetype} status | grep \"inactive (dead)\""
				sleep 5
				if(servicetype == 'puppet'){
					startstopaem(s,action,servicetype)
				}
			}
			else if(action == 'status'){
				println "$ssh_status_command sudo service ${servicetype} status | grep \"active (running)\""
				sleep 5
				if(servicetype == 'puppet'){
					startstopaem(s,action,servicetype)
				}
			}
		}catch(Exception e) {
			result='Failure'
			catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
				sh "exit 1"
			}
		}
	}
	return result
}
def startstopaem(Object server, String action, String servicetype){
	
	println "inside aem start stop method"
	/*SSH_OPTION="ssh -o StrictHostKeyChecking=no -qq -i ~/.ssh/id_jenkins_worker_rsa jenkins_worker@${server}"

	echo "copying script to AEM node"
	echo
	scp -v -o StrictHostKeyChecking=no -qq -i ~/.ssh/id_jenkins_worker_rsa scripts/stop-start-aem.sh jenkins_worker@${server}:/home/jenkins_worker
	$SSH_OPTION "sudo chmod 664 /home/jenkins_worker/stop-start-aem.sh"
	echo
	echo "changing ownership of script to aem_local user"

	$SSH_OPTION "sudo mv /home/jenkins_worker/stop-start-aem.sh /data/apps/aem/"
	$SSH_OPTION "sudo chmod 755 /data/apps/aem/stop-start-aem.sh"
	$SSH_OPTION "sudo chown -R aem_local:aem_local /data/apps/aem/stop-start-aem.sh"
	$SSH_OPTION "sudo su - aem_local -c '/data/apps/aem/stop-start-aem.sh ${ACTION}'"

	##Cleaning up the AEM script after stop start action performed

	$SSH_OPTION "sudo rm -rf /data/apps/aem/stop-start-aem.sh"
	$SSH_OPTION "sudo ps -ef | grep cq-quickstart"


	exit 0
	*/
}