def action =params.Action
def application =params.Application
def environment =params.Environment
def publishresults='' 
def cause = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')


pipeline {
    agent any

    stages {
        stage('Parallel execution') {
            parallel {
                stage('Application: api-aem-kafka-producer') {
                    when {
                        expression {
                        application.contains("api-aem-kafka-producer")
                        }
                    }
                    steps {
                        script{
                            try{
                                println "Performing "+ action +" on application api-aem-kafka-producer"
                                def serverdetails = readJSON file: 'api-aem-kafka-producer.json'
								def sit_Server = serverdetails.SIT_SERVERS
								def dev_Server = serverdetails.DEV_SERVERS
								
								if(environment.contains("SIT")){
									def result = ActionOnSingleApi(sit_Server,'api-aem-kafka-producer',action)
									publishresults = publishresults + "application:" + application + "-" + result+ "\n"
								}
								if(environment.contains("DEV")){
									def result = ActionOnSingleApi(dev_Server,'api-aem-kafka-producer',action)
									publishresults = publishresults + "application:" + application + "-" + result+ "\n"
								}	

                            }catch(Exception e) 
                            {
                                println "******** ERROR ********"+e
                                result ='Failure'
								publishresults = publishresults + "application:" + application + "-" + result+ "\n"
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') 
								{
                                    sh "exit 1"
                                }
                            }
                        }
                    }        
                }    
                stage('Application: Serviceability') {
                    when {
                        expression {
                  			application.contains("Serviceability")
                        }
                    }
                    steps {
                        script{
                            try{
                                println "Performing "+ action +" on application Serviceability"
                                def serverdetails = readJSON file: 'Serviceability.json'
								def sit_Server = serverdetails.SIT_SERVERS
								def dev_Server = serverdetails.DEV_SERVERS
								def qa_Server = serverdetails.QA_SERVERS
								def api = serverdetails.SALI_API
								
								if(environment.contains("SIT")){
									def result = ActionOnMultpileApi(sit_Server,api,action)
									publishresults = publishresults + "application:" + application + "-" + result+ "\n"
								}
								if(environment.contains("DEV")){
									def result = ActionOnMultpileApi(dev_Server,api,action)
									publishresults = publishresults + "application:" + application + "-" + result+ "\n"
								}
								if(environment.contains("QA")){
									def result = ActionOnMultpileApi(qa_Server,api,action)
									publishresults = publishresults + "application:" + application + "-" + result+ "\n"
								}								

                            }catch(Exception e) 
                            {
                                println "******** ERROR ********"+e
                                result ='Failure'
								publishresults = publishresults + "application:" + application + "-" + result+ "\n"
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') 
								{
                                    sh "exit 1"
                                }
                            }
             
                        }
                    }
                }
                stage('Application: Smartsheet') {
                    when {
                        expression {
                            application.contains("Smartsheet")
                        }
                    }
                    steps {
                        script{
                            try{    
                                println "Performing "+ action +" on application Smartsheet"
                                def serverdetails = readJSON file: 'Smartsheet.json'
                               def sit_Server = serverdetails.SIT_SERVERS
								def dev_Server = serverdetails.DEV_SERVERS
								def qa_Server = serverdetails.QA_SERVERS
								def api = serverdetails.SMARTSHEET_API
								
								if(environment.contains("SIT")){
									def result = ActionOnMultpileApi(sit_Server,api,action)
									publishresults = publishresults + "application:" + application + "-" + result+ "\n"
								}
								if(environment.contains("DEV")){
									def result = ActionOnMultpileApi(dev_Server,api,action)
									publishresults = publishresults + "application:" + application + "-" + result+ "\n"
								}
								if(environment.contains("QA")){
									def result = ActionOnMultpileApi(qa_Server,api,action)
									publishresults = publishresults + "application:" + application + "-" + result+ "\n"
								}								

                            }catch(Exception e) 
                            {
                                println "******** ERROR ********"+e
                                result ='Failure'
								publishresults = publishresults + "application:" + application + "-" + result+ "\n"
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') 
								{
                                    sh "exit 1"
                                }
                            }
                        }
                    }
                }
                stage('Application: ServiceRouter') {
                    when {
                        expression {
                            application.contains("ServiceRouter")
                        }
                        }
                    steps {
                        script{
                            try{    
                                println "Performing "+ action +" on application ServiceRouter"
                                def serverdetails = readJSON file: 'ServiceRouter.json'
								def sit_Server = serverdetails.SIT_SERVERS
								def dev_Server = serverdetails.DEV_SERVERS
								
								if(environment.contains("SIT")){
									def result = ActionOnSingleApi(sit_Server,'SplunkForwarder',action)
									//def result = ActionOnSingleApi(sit_Server,'servicerouter',action)
									publishresults = publishresults + "application:" + application + "-" + result+ "\n"
								}
								if(environment.contains("DEV")){
									def result = ActionOnSingleApi(sit_Server,'SplunkForwarder',action)
									//def result = ActionOnSingleApi(dev_Server,'servicerouter',action)
									publishresults = publishresults + "application:" + application + "-" + result+ "\n"
								}	

                            }catch(Exception e) 
                            {
                                println "******** ERROR ********"+e
                                result ='Failure'
								publishresults = publishresults + "application:" + application + "-" + result+ "\n"
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') 
								{
                                    sh "exit 1"
                                }
                            }            
                        }
                    }
                }
                       
                stage('Application: api-mobilehandofftoken') {
                    when {
                        expression {
                            application.contains("api-mobilehandofftoken")
                            }
                        }
                    steps {
                        script{
                            try{
                                println "Performing "+ action +" on application api-mobilehandofftoken"
                                def serverdetails = readJSON file: 'api-mobilehandofftoken.json'
								def sit_Server = serverdetails.SIT_SERVERS
								def dev_Server = serverdetails.DEV_SERVERS
								def qa_Server = serverdetails.QA_SERVERS
								
								if(environment.contains("SIT")){
									def result = ActionOnSingleApi(sit_Server,'api-mobilehandofftoken',action)
									publishresults = publishresults + "application:" + application + "-" + result+ "\n"
								}
								if(environment.contains("DEV")){
									def result = ActionOnSingleApi(dev_Server,'api-mobilehandofftoken',action)
									publishresults = publishresults + "application:" + application + "-" + result+ "\n"
								}
								if(environment.contains("QA")){
									def result = ActionOnSingleApi(qa_Server,'api-mobilehandofftoken',action)
									publishresults = publishresults + "application:" + application + "-" + result+ "\n"
								}								

                            }catch(Exception e) 
                            {
                                println "******** ERROR ********"+e
                                result ='Failure'
								publishresults = publishresults + "application:" + application + "-" + result+ "\n"
                                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') 
								{
                                    sh "exit 1"
                                }
                            } 
                        }
                    }
                }
            }
        }        
    }
   post {
		always {
			println publishresults
			/*sparkSend credentialsId: 'UnifiedBuyflowSparkBot', 
			message: " Job URL: ${env.JOB_URL} \n User: ${cause.userName} \n Application: [${Application}] \n Action: [${action}] \n DC: [${datacenter}] \n Build status: [${currentBuild.currentResult}] \n StageResult: [${publishresults}] ",
			spaceList: [[spaceId: '21f9d0e0-92b5-11ee-a0f4-6d1d3af5a51f', 
			spaceName: 'MamtaKT']]*/
			}
	}
}
def ActionOnMultpileApi(Object server, Object api, String action ){
	def result ='Success'
	def sshOption="-i ${JENKINS_HOME}/.ssh/id_jenkins_worker_rsa -o StrictHostKeyChecking=no"
	for(s in server) {
		def sshCommandLine="ssh ${sshOption} jenkins_worker@${s}"
		for(a in api) 
		{
			println "${sshCommandLine} sudo service ${a} ${action}"
			try{
				//sh "${sshCommandLine} sudo service ${a} ${action}"
			}catch(Exception e) 
			{
				println "******** ERROR ********"+e
				result ='Failure'
				catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') 
				{
				sh "exit 1"
				}
			}
		}
	}
	return result
}
def ActionOnSingleApi(Object server, String api, String action ){
	def result ='Success'
	def sshOption="-i ${JENKINS_HOME}/.ssh/id_jenkins_worker_rsa -o StrictHostKeyChecking=no"
	for(s in server) {
		def sshCommandLine="ssh ${sshOption} jenkins_worker@${s}"
		println "${sshCommandLine} sudo service ${api} ${action}" 
		try{
			//sh "${sshCommandLine} sudo service ${api} ${action}"
		}catch(Exception e) 
		{
			println "******** ERROR ********"+e
			result ='Failure'
			catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') 
			{
				sh "exit 1"
			}
		}
	}
	return result
}
